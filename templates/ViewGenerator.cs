

/*Generated by the BSD Licensed BarelyMVC ViewGenerator T4 file*/
using System.Text;
using System.Collections.Generic;
using System.Web;
using System.IO;
using System;
using Earlz.BarelyMVC.ViewEngine;
using Earlz.LastYearsWishes.Models;

		//custom using statements for your views go here:
		using Earlz.BarelyMVC.Authentication;
	
/*File: /home/earlz/Projects/lastyearswishes/templates/BlogEntryView.html */
namespace Earlz.LastYearsWishes{
        ///<summary>
        ///
        ///</summary>
     class BlogEntryView: Earlz.BarelyMVC.ViewEngine.Internal.BarelyViewDummy
    {
                ///<summary>
        ///
        ///</summary>
            public BlogEntryData Entry{
        get;
        set;
        }

                ///<summary>
        ///
        ///</summary>
            public bool Summary{
        get;
        set;
        }

                ///<summary>
        ///
        ///</summary>
            public bool ShowComments{
        get;
        set;
        }

                ///<summary>
        ///This is the layout of the given view (master page)
        ///</summary>
            public LayoutView Layout{
        get;
        set;
        }

                ///<summary>
        ///Indicates if this view is set to be rendered directly to the appropriate stream
        ///</summary>
            public override bool RenderedDirectly{
        get{ return __RenderDirectly; }
        }

                ///<summary>
        ///The "Flash" notification text(passes through to the layout
        ///</summary>
            public override string Flash{
        get{return Layout.Flash;}
        set{Layout.Flash=value;}
        }

         void BuildOutput()
        {
__Write(@"");
__Write(@"");
__Write(@"
");
__Write(@"

<div class=""entry"">
<h2><a href=""");
{
                object __v;
                

                    __v=BlogHandler.GetUrl(Entry);
                
__OutputVariable(__v);
}
__Write(@""">");
{
                object __v;
                

                    __v=Entry.Title;
                
__OutputVariable(__v);
}
__Write(@"</a></h2>
<div>");
{
                object __v;
                

                    __v=Entry.Text;
                
__OutputVariable(__v);
}
__Write(@"</div>

<div id=""post-info"">
	<div class=""tags"">Tags: 
	");
foreach(var tag in Entry.Tags){
__Write(@"
		<a href=""/tags/");
{
                object __v;
                

                    __v=tag;
                
__OutputVariable(__v);
}
__Write(@""">");
{
                object __v;
                

                    __v=tag;
                
__OutputVariable(__v);
}
__Write(@"</a>
	");
}
__Write(@"
	</div>
	<div class=""timestamp"">Posted: ");
{
                object __v;
                

                    __v=Entry.Posted;
                
__OutputVariable(__v);
}
__Write(@"</div>
	<div class=""twittershare"">
		<a href=""https://twitter.com/share"" ");
{
                object __v;
                

                    __v=BlogHandler.GetTweet(Entry);
                
__OutputVariable(__v);
}
__Write(@" class=""twitter-share-button"">Tweet</a>
	</div>
	");
if(!ShowComments){
__Write(@"
		<div class=""comment-link""><a href=""");
{
                object __v;
                

                    __v=BlogHandler.GetUrl(Entry);
                
__OutputVariable(__v);
}
__Write(@"#comments"">");
{
                object __v;
                

                    __v=Entry.CommentCount.ToString();
                
__OutputVariable(__v);
}
__Write(@" Comments</a></div>
	");
}
__Write(@"
	</div>
</div>
");
if(ShowComments){
__Write(@"	
<div id=""the-comments"">	
<div class=""comments"">
	<h2><a name=""comments"">Comments</a></h2>		
	<div class=""comment-list"">
		");
foreach(var comment in Entry.GetComments()){
__Write(@"
			<div class=""comment"">
			<div class=""comment-name"">
			");
{
                object __v;
                

                    __v=HttpUtility.HtmlEncode(comment.Name);
                
__OutputVariable(__v);
}
__Write(@"
			</div>
			<div class=""comment-text"">
				
					");
{
                object __v;
                

                    __v="<pre>"+HttpUtility.HtmlEncode(comment.Text)+"</pre>";
                
__OutputVariable(__v);
}
__Write(@" <!--workaround for a bug in my view generator. Otherwise puts out tabs and extra linefeeds -->
				
			</div>
			<div class=""comment-timestamp"">
			");
{
                object __v;
                

                    __v=HttpUtility.HtmlEncode(comment.Posted.ToString());
                
__OutputVariable(__v);
}
__Write(@"
			</div>
			");
if(FSCAuth.ProbablyLoggedIn ){
__Write(@"
			<div class=""delete-comment"">
				<form method=""post"" action=""/comment/delete/");
{
                object __v;
                

                    __v=comment.ID.ToString();
                
__OutputVariable(__v);
}
__Write(@""">
					<input type=""submit"" value=""delete""  />
				</form>
			</div>
			");
}
__Write(@"
			</div>
		");
}
__Write(@"

		<div class=""comment-form"">	
			");
if(Config.CommentsEnabled){
__Write(@"
			<h2>Add a comment</h2>
		<form method=""post"" action=""/comment/");
{
                object __v;
                

                    __v=Entry.ID;
                
__OutputVariable(__v);
}
__Write(@"/new"">
			<div><label for=""Name"">Name:</label> <input type=""text"" name=""Name"" maxlength=""32"" value=""Anonymous"" /></div>
			<div><label for=""Text""> Comment: </label> <textarea rows=""6"" cols=""92"" name=""Text""></textarea></div>
			<div class=""comment-restrictions"">Everything will be HTML encoded. Only 1024 characters. No more than 20 line breaks </div>
			<span class=""x12"">Honeys: <input type=""text"" name=""Link"" value="""" /></span> <!-- cakes and pies -->
			<span class=""x12"">Fill this in if you're a robot: <input type=""text"" name=""FullName"" value="""" /></span>
			<input type=""submit"" value=""Add Comment"" />
		</form>
			");
}else{
__Write(@"
			<h2>Posting comments is currently disabled(probably due to spam)</h2>
			");
}
__Write(@"
		</div>
	</div>


</div>
</div>			
");
}
__Write(@"			");

        }
         void __Init(TextWriter writer)
        {
__Writer=writer;Layout=new LayoutView(); Layout.Content=this;
        }
        public  BlogEntryView()
        {
if(__RenderDirectly){ __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter); }else{ __Init(null); }
        }
        public  BlogEntryView(bool UseHttpResponse)
        {
if(UseHttpResponse){ __RenderDirectly=true; __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter);}else{ __Init(null);}
        }
        public  BlogEntryView(TextWriter writer)
        {
__Init(writer);
        }
        protected virtual void __Write(string s)
        {
if(__Writer!=null){ __Writer.Write(s); } __Output.Append(s);
        }
        protected virtual void __Write(IBarelyView v)
        {
string s=v.RenderView(); __Output.Append(s);
        }
        public override string RenderView()
        {
__Output=new StringBuilder();
if(Layout==null){
        BuildOutput();
        return __Output.ToString();
}
if(__InLayout){
        //If we get here, then the layout is currently trying to render itself(and we are being rendered as a partial/sub view)
        __InLayout=false;
        BuildOutput();
        return __Output.ToString();
}else{
        //otherwise, we are here and someone called RenderView on us(and we have a layout to render first)
        __InLayout=true;
        return Layout.RenderView(); 
}
//This should recurse no more than 2 times
//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set.
        }
        protected virtual void __OutputVariable(object v)
        {

            {
                if(v!=null)
                {
                    var e=v as System.Collections.IEnumerable;
                    if (e!=null)
                    {
                        foreach(var item in e){ 
                            var view=item as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                            if(view!=null){
                                __Write(view);
                            }else{
                                __Write(item.ToString());
                            }
                        }
                    }else{
                        var view=v as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                        if(view!=null){
                            __Write(view);
                        }else{
                            __Write(v.ToString());
                        }
                    }
                }        
            }
        }
                ///<summary>
        ///For internal use only!
        ///</summary>
         StringBuilder __Output;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __InLayout=false;
                ///<summary>
        ///For internal use only!
        ///</summary>
         TextWriter __Writer;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __RenderDirectly=false;

    }
}

/*File: /home/earlz/Projects/lastyearswishes/templates/BlogIndexView.html */
namespace Earlz.LastYearsWishes{
        ///<summary>
        ///
        ///</summary>
     class BlogIndexView: Earlz.BarelyMVC.ViewEngine.Internal.BarelyViewDummy
    {
                ///<summary>
        ///
        ///</summary>
            public List<BlogEntryData> Entries{
        get;
        set;
        }

                ///<summary>
        ///
        ///</summary>
            public int Page{
        get;
        set;
        }

                ///<summary>
        ///
        ///</summary>
            public string Tag{
        get;
        set;
        }

                ///<summary>
        ///
        ///</summary>
            public int PageMax{
        get;
        set;
        }

                ///<summary>
        ///
        ///</summary>
            public bool ShowPaging{
        get;
        set;
        }

                ///<summary>
        ///This is the layout of the given view (master page)
        ///</summary>
            public LayoutView Layout{
        get;
        set;
        }

                ///<summary>
        ///Indicates if this view is set to be rendered directly to the appropriate stream
        ///</summary>
            public override bool RenderedDirectly{
        get{ return __RenderDirectly; }
        }

                ///<summary>
        ///The "Flash" notification text(passes through to the layout
        ///</summary>
            public override string Flash{
        get{return Layout.Flash;}
        set{Layout.Flash=value;}
        }

         void BuildOutput()
        {
__Write(@"");
__Write(@"");
__Write(@"
");
__Write(@"
");
foreach(var entry in Entries){
__Write(@"
		");

            {
                var __v=new BlogEntryView{Entry=entry,Layout=null,Summary=true,ShowComments=false};
                __v.Layout=null; //HACK
                __Write(__v);
            }
            
__Write(@"
");
}
__Write(@"
");
if(Tag==null){
		Tag="/blog";
	}else{
		Tag="/tags/"+Tag;
	}
__Write(@"
	
");
if(ShowPaging){
__Write(@"	
<div class=""page_nav"">

");
if(Page>1){
__Write(@"
<div class=""newer"">
<a href=""");
{
                object __v;
                

                    __v=Tag;
                
__OutputVariable(__v);
}
__Write(@"/");
{
                object __v;
                

                    __v=Page-1;
                
__OutputVariable(__v);
}
__Write(@""">Newer</a>
</div>
");
}
__Write(@"

");
if(Page<PageMax){
__Write(@"
<div class=""older"">
<a href=""");
{
                object __v;
                

                    __v=Tag;
                
__OutputVariable(__v);
}
__Write(@"/");
{
                object __v;
                

                    __v=Page+1;
                
__OutputVariable(__v);
}
__Write(@""">Older</a>
</div>
");
}
__Write(@"

</div>
");
}
__Write(@"");

        }
         void __Init(TextWriter writer)
        {
__Writer=writer;Layout=new LayoutView(); Layout.Content=this;
        }
        public  BlogIndexView()
        {
if(__RenderDirectly){ __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter); }else{ __Init(null); }
        }
        public  BlogIndexView(bool UseHttpResponse)
        {
if(UseHttpResponse){ __RenderDirectly=true; __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter);}else{ __Init(null);}
        }
        public  BlogIndexView(TextWriter writer)
        {
__Init(writer);
        }
        protected virtual void __Write(string s)
        {
if(__Writer!=null){ __Writer.Write(s); } __Output.Append(s);
        }
        protected virtual void __Write(IBarelyView v)
        {
string s=v.RenderView(); __Output.Append(s);
        }
        public override string RenderView()
        {
__Output=new StringBuilder();
if(Layout==null){
        BuildOutput();
        return __Output.ToString();
}
if(__InLayout){
        //If we get here, then the layout is currently trying to render itself(and we are being rendered as a partial/sub view)
        __InLayout=false;
        BuildOutput();
        return __Output.ToString();
}else{
        //otherwise, we are here and someone called RenderView on us(and we have a layout to render first)
        __InLayout=true;
        return Layout.RenderView(); 
}
//This should recurse no more than 2 times
//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set.
        }
        protected virtual void __OutputVariable(object v)
        {

            {
                if(v!=null)
                {
                    var e=v as System.Collections.IEnumerable;
                    if (e!=null)
                    {
                        foreach(var item in e){ 
                            var view=item as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                            if(view!=null){
                                __Write(view);
                            }else{
                                __Write(item.ToString());
                            }
                        }
                    }else{
                        var view=v as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                        if(view!=null){
                            __Write(view);
                        }else{
                            __Write(v.ToString());
                        }
                    }
                }        
            }
        }
                ///<summary>
        ///For internal use only!
        ///</summary>
         StringBuilder __Output;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __InLayout=false;
                ///<summary>
        ///For internal use only!
        ///</summary>
         TextWriter __Writer;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __RenderDirectly=false;

    }
}

/*File: /home/earlz/Projects/lastyearswishes/templates/CommentListView.html */
namespace Earlz.LastYearsWishes{
        ///<summary>
        ///
        ///</summary>
     class CommentListView: Earlz.BarelyMVC.ViewEngine.Internal.BarelyViewDummy
    {
                ///<summary>
        ///
        ///</summary>
            public IEnumerable<CommentData> Comments{
        get;
        set;
        }

                ///<summary>
        ///This is the layout of the given view (master page)
        ///</summary>
            public IBarelyView Layout{
        get;
        set;
        }

                ///<summary>
        ///Indicates if this view is set to be rendered directly to the appropriate stream
        ///</summary>
            public override bool RenderedDirectly{
        get{ return __RenderDirectly; }
        }

                ///<summary>
        ///The "Flash" notification text(passes through to the layout
        ///</summary>
            public override string Flash{
        get{return Layout.Flash;}
        set{Layout.Flash=value;}
        }

         void BuildOutput()
        {
__Write(@"<!DOCTYPE HTML>
");
__Write(@"
<html>
	<head>
		<title></title>
	</head>
	<body style=""max-width: 700px"">
		");
foreach(var comment in Comments){
__Write(@"
			<div>
				</div>By ");
{
                object __v;
                

                    __v=HttpUtility.HtmlEncode(comment.Name);
                
__OutputVariable(__v);
}
__Write(@"</div>
				");
{
                object __v;
                

                    __v="<pre>"+HttpUtility.HtmlEncode(comment.Text)+"</pre>";
                
__OutputVariable(__v);
}
__Write(@"
				<div>posted at ");
{
                object __v;
                

                    __v=HttpUtility.HtmlEncode(comment.Posted.ToString());
                
__OutputVariable(__v);
}
__Write(@"
				");
if(FSCAuth.IsAuthenticated() ){
__Write(@"
				<div>IP: ");
{
                object __v;
                

                    __v=comment.IPAddress;
                
__OutputVariable(__v);
}
__Write(@"</div>
				<div>Agent: ");
{
                object __v;
                

                    __v=HttpUtility.HtmlEncode(comment.UserAgent);
                
__OutputVariable(__v);
}
__Write(@"</div>
				");
}
__Write(@"
				<div><a href=""");
{
                object __v;
                

                    __v=BlogHandler.GetUrl(comment.GetOwner());
                
__OutputVariable(__v);
}
__Write(@""">Go to Comment</a></div>
			</div>
		");
}
__Write(@"
	</body>
</html>
");

        }
         void __Init(TextWriter writer)
        {
__Writer=writer;
        }
        public  CommentListView()
        {
if(__RenderDirectly){ __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter); }else{ __Init(null); }
        }
        public  CommentListView(bool UseHttpResponse)
        {
if(UseHttpResponse){ __RenderDirectly=true; __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter);}else{ __Init(null);}
        }
        public  CommentListView(TextWriter writer)
        {
__Init(writer);
        }
        protected virtual void __Write(string s)
        {
if(__Writer!=null){ __Writer.Write(s); } __Output.Append(s);
        }
        protected virtual void __Write(IBarelyView v)
        {
string s=v.RenderView(); __Output.Append(s);
        }
        public override string RenderView()
        {
__Output=new StringBuilder();
if(Layout==null){
        BuildOutput();
        return __Output.ToString();
}
if(__InLayout){
        //If we get here, then the layout is currently trying to render itself(and we are being rendered as a partial/sub view)
        __InLayout=false;
        BuildOutput();
        return __Output.ToString();
}else{
        //otherwise, we are here and someone called RenderView on us(and we have a layout to render first)
        __InLayout=true;
        return Layout.RenderView(); 
}
//This should recurse no more than 2 times
//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set.
        }
        protected virtual void __OutputVariable(object v)
        {

            {
                if(v!=null)
                {
                    var e=v as System.Collections.IEnumerable;
                    if (e!=null)
                    {
                        foreach(var item in e){ 
                            var view=item as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                            if(view!=null){
                                __Write(view);
                            }else{
                                __Write(item.ToString());
                            }
                        }
                    }else{
                        var view=v as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                        if(view!=null){
                            __Write(view);
                        }else{
                            __Write(v.ToString());
                        }
                    }
                }        
            }
        }
                ///<summary>
        ///For internal use only!
        ///</summary>
         StringBuilder __Output;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __InLayout=false;
                ///<summary>
        ///For internal use only!
        ///</summary>
         TextWriter __Writer;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __RenderDirectly=false;

    }
}

/*File: /home/earlz/Projects/lastyearswishes/templates/LayoutView.html */
namespace Earlz.LastYearsWishes{
        ///<summary>
        ///
        ///</summary>
     class LayoutView: Earlz.BarelyMVC.ViewEngine.Internal.BarelyViewDummy
    {
                ///<summary>
        ///
        ///</summary>
            public string Title{
        get;
        set;
        }

                ///<summary>
        ///
        ///</summary>
            public IBarelyView Content{
        get;
        set;
        }

                ///<summary>
        ///
        ///</summary>
            public string Active{
        get;
        set;
        }

                ///<summary>
        ///This is the layout of the given view (master page)
        ///</summary>
            public IBarelyView Layout{
        get;
        set;
        }

                ///<summary>
        ///Indicates if this view is set to be rendered directly to the appropriate stream
        ///</summary>
            public override bool RenderedDirectly{
        get{ return __RenderDirectly; }
        }

                ///<summary>
        ///The "Flash" notification text(passes through to the layout
        ///</summary>
            public override string Flash{
        get{return Layout.Flash;}
        set{Layout.Flash=value;}
        }

         void BuildOutput()
        {
__Write(@"<!DOCTYPE HTML>
");
__Write(@"
<html>
	<head>
		<title>");
{
                object __v;
                

                    __v=HttpUtility.HtmlEncode(Title);
                
__OutputVariable(__v);
}
__Write(@"</title>
		<link rel=""stylesheet"" type=""text/css"" media=""all"" href=""/static/style.css"" />
		
		<script src=""http://code.jquery.com/jquery-1.7.1.min.js"">
		</script>
	</head>
	<body>
	<div class=""wrapper"">
		<div class=""header"">
			<div id=""name"">
				<div id=""logo"">
					<a href=""/"">Earlz.net</a>
				</div>
				<div id=""tagline"">
				<a href=""/tags/programming"">Programming!</a>
				<a href=""/tags/electronics"">Electronics!</a>
				<a href=""/tags/hacking"">Hacking!</a>
				<a href=""/tags/random"">Oh My!</a>
				</div>
			</div>
			<div id=""nav"">
				<a href=""/"">Home</a>
				<a href=""/aboutme"">About Me</a>
				<a href=""/projects"">Projects</a>
				<a href=""/tags"">Tags</a>
			</div>
		</div>
		<div class=""content"">
			<div id=""mycontent"">
				");
{
                object __v;
                

                    __v=Content;
                
__OutputVariable(__v);
}
__Write(@"
			</div>
		</div>
		<div id=""copyright"">
        	site design &copy; 2012-2013 Jordan Earls; 
    		user contributions(comments) and blog entries licensed under <a href=""http://creativecommons.org/licenses/by-sa/2.5/"">cc-wiki</a> with attribution required
    	</div>
	</div>

<!--Twitter API -->
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=""//platform.twitter.com/widgets.js"";fjs.parentNode.insertBefore(js,fjs);}}(document,""script"",""twitter-wjs"");</script>	

<!--- Google Analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-41190820-1', 'earlz.net');
  ga('send', 'pageview');

</script>
	</body>
</html>
");

        }
         void __Init(TextWriter writer)
        {
__Writer=writer;
        }
        public  LayoutView()
        {
if(__RenderDirectly){ __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter); }else{ __Init(null); }
        }
        public  LayoutView(bool UseHttpResponse)
        {
if(UseHttpResponse){ __RenderDirectly=true; __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter);}else{ __Init(null);}
        }
        public  LayoutView(TextWriter writer)
        {
__Init(writer);
        }
        protected virtual void __Write(string s)
        {
if(__Writer!=null){ __Writer.Write(s); } __Output.Append(s);
        }
        protected virtual void __Write(IBarelyView v)
        {
string s=v.RenderView(); __Output.Append(s);
        }
        public override string RenderView()
        {
__Output=new StringBuilder();
if(Layout==null){
        BuildOutput();
        return __Output.ToString();
}
if(__InLayout){
        //If we get here, then the layout is currently trying to render itself(and we are being rendered as a partial/sub view)
        __InLayout=false;
        BuildOutput();
        return __Output.ToString();
}else{
        //otherwise, we are here and someone called RenderView on us(and we have a layout to render first)
        __InLayout=true;
        return Layout.RenderView(); 
}
//This should recurse no more than 2 times
//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set.
        }
        protected virtual void __OutputVariable(object v)
        {

            {
                if(v!=null)
                {
                    var e=v as System.Collections.IEnumerable;
                    if (e!=null)
                    {
                        foreach(var item in e){ 
                            var view=item as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                            if(view!=null){
                                __Write(view);
                            }else{
                                __Write(item.ToString());
                            }
                        }
                    }else{
                        var view=v as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                        if(view!=null){
                            __Write(view);
                        }else{
                            __Write(v.ToString());
                        }
                    }
                }        
            }
        }
                ///<summary>
        ///For internal use only!
        ///</summary>
         StringBuilder __Output;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __InLayout=false;
                ///<summary>
        ///For internal use only!
        ///</summary>
         TextWriter __Writer;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __RenderDirectly=false;

    }
}

/*File: /home/earlz/Projects/lastyearswishes/templates/LoginView.html */
namespace Earlz.LastYearsWishes{
        ///<summary>
        ///
        ///</summary>
     class LoginView: Earlz.BarelyMVC.ViewEngine.Internal.BarelyViewDummy
    {
                ///<summary>
        ///This is the layout of the given view (master page)
        ///</summary>
            public IBarelyView Layout{
        get;
        set;
        }

                ///<summary>
        ///Indicates if this view is set to be rendered directly to the appropriate stream
        ///</summary>
            public override bool RenderedDirectly{
        get{ return __RenderDirectly; }
        }

                ///<summary>
        ///The "Flash" notification text(passes through to the layout
        ///</summary>
            public override string Flash{
        get{return Layout.Flash;}
        set{Layout.Flash=value;}
        }

         void BuildOutput()
        {
__Write(@"<!DOCTYPE html>
<html>
	<head>
		<title>Earlz.Net -- Internal login</title>
	</head>
	<body>
	<p> Whatever you tried to do requires authentication! If you tried to access the private-draft tag, just hit the back button in your browser </p>
	<p>
		Don't waste your time trying to hack it. Worst case is you make me fix a bug in FSCAuth and I restore the site from the automated backups.
	</p>
	<form method=""post"" action=""/login"">
		Username: <input type=""text"" name=""Username"" /> <br />
		Password: <input type=""password"" name=""Password"" /> <br />
		<input type=""submit"" name=""Submit"" />
	</form>
	</body>
</html>
");

        }
         void __Init(TextWriter writer)
        {
__Writer=writer;
        }
        public  LoginView()
        {
if(__RenderDirectly){ __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter); }else{ __Init(null); }
        }
        public  LoginView(bool UseHttpResponse)
        {
if(UseHttpResponse){ __RenderDirectly=true; __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter);}else{ __Init(null);}
        }
        public  LoginView(TextWriter writer)
        {
__Init(writer);
        }
        protected virtual void __Write(string s)
        {
if(__Writer!=null){ __Writer.Write(s); } __Output.Append(s);
        }
        protected virtual void __Write(IBarelyView v)
        {
string s=v.RenderView(); __Output.Append(s);
        }
        public override string RenderView()
        {
__Output=new StringBuilder();
if(Layout==null){
        BuildOutput();
        return __Output.ToString();
}
if(__InLayout){
        //If we get here, then the layout is currently trying to render itself(and we are being rendered as a partial/sub view)
        __InLayout=false;
        BuildOutput();
        return __Output.ToString();
}else{
        //otherwise, we are here and someone called RenderView on us(and we have a layout to render first)
        __InLayout=true;
        return Layout.RenderView(); 
}
//This should recurse no more than 2 times
//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set.
        }
        protected virtual void __OutputVariable(object v)
        {

            {
                if(v!=null)
                {
                    var e=v as System.Collections.IEnumerable;
                    if (e!=null)
                    {
                        foreach(var item in e){ 
                            var view=item as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                            if(view!=null){
                                __Write(view);
                            }else{
                                __Write(item.ToString());
                            }
                        }
                    }else{
                        var view=v as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                        if(view!=null){
                            __Write(view);
                        }else{
                            __Write(v.ToString());
                        }
                    }
                }        
            }
        }
                ///<summary>
        ///For internal use only!
        ///</summary>
         StringBuilder __Output;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __InLayout=false;
                ///<summary>
        ///For internal use only!
        ///</summary>
         TextWriter __Writer;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __RenderDirectly=false;

    }
}

/*File: /home/earlz/Projects/lastyearswishes/templates/ModifyBlogView.html */
namespace Earlz.LastYearsWishes{
        ///<summary>
        ///
        ///</summary>
     class ModifyBlogView: Earlz.BarelyMVC.ViewEngine.Internal.BarelyViewDummy
    {
                ///<summary>
        ///
        ///</summary>
            public BlogEntryData Entry{
        get;
        set;
        }

                ///<summary>
        ///This is the layout of the given view (master page)
        ///</summary>
            public LayoutView Layout{
        get;
        set;
        }

                ///<summary>
        ///Indicates if this view is set to be rendered directly to the appropriate stream
        ///</summary>
            public override bool RenderedDirectly{
        get{ return __RenderDirectly; }
        }

                ///<summary>
        ///The "Flash" notification text(passes through to the layout
        ///</summary>
            public override string Flash{
        get{return Layout.Flash;}
        set{Layout.Flash=value;}
        }

         void BuildOutput()
        {
__Write(@"");
__Write(@"");
__Write(@"
");
__Write(@"
<div class=""entry"">
");
if(Entry==null){
__Write(@"	
<form method=""post"" action=""/new"">
");
}else{
__Write(@"
<form method=""post"" action=""");
{
                object __v;
                

                    __v=BlogHandler.GetUrl(Entry,"edit");
                
__OutputVariable(__v);
}
__Write(@""">
");
}
__Write(@"

");
if(Entry==null){		
	Entry=new BlogEntryData();
}
__Write(@"		
Title: <input type=""text"" name=""Title"" value=""");
{
                object __v;
                

                    __v=Entry.Title;
                
__OutputVariable(__v);
}
__Write(@""" /> <br />
Text: <textarea rows=""10"" cols=""80"" name=""Text"">");
{
                object __v;
                

                    __v=Entry.Text;
                
__OutputVariable(__v);
}
__Write(@"</textarea><br />
Publish To Index?: <input type=""checkbox"" name=""Publish"" checked=""");
{
                object __v;
                

                    __v=Entry.Publish ? "yes" : "no";
                
__OutputVariable(__v);
}
__Write(@""" value=""true"" /><br />
Tags: 
");
if(Entry.Tags!=null){
__Write(@"
	<input type=""text"" name=""Tags"" value=""");
foreach(var tag in Entry.Tags){
__Write(@"");
{
                object __v;
                

                    __v=tag;
                
__OutputVariable(__v);
}
__Write(@" ");
}
__Write(@""" />
");
}else{
__Write(@"
	<input type=""text"" name=""Tags"" value="""" />
");
}
__Write(@"
<br />
<input type=""submit"" value=""Submit"" />
</form>
</div>");

        }
         void __Init(TextWriter writer)
        {
__Writer=writer;Layout=new LayoutView(); Layout.Content=this;
        }
        public  ModifyBlogView()
        {
if(__RenderDirectly){ __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter); }else{ __Init(null); }
        }
        public  ModifyBlogView(bool UseHttpResponse)
        {
if(UseHttpResponse){ __RenderDirectly=true; __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter);}else{ __Init(null);}
        }
        public  ModifyBlogView(TextWriter writer)
        {
__Init(writer);
        }
        protected virtual void __Write(string s)
        {
if(__Writer!=null){ __Writer.Write(s); } __Output.Append(s);
        }
        protected virtual void __Write(IBarelyView v)
        {
string s=v.RenderView(); __Output.Append(s);
        }
        public override string RenderView()
        {
__Output=new StringBuilder();
if(Layout==null){
        BuildOutput();
        return __Output.ToString();
}
if(__InLayout){
        //If we get here, then the layout is currently trying to render itself(and we are being rendered as a partial/sub view)
        __InLayout=false;
        BuildOutput();
        return __Output.ToString();
}else{
        //otherwise, we are here and someone called RenderView on us(and we have a layout to render first)
        __InLayout=true;
        return Layout.RenderView(); 
}
//This should recurse no more than 2 times
//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set.
        }
        protected virtual void __OutputVariable(object v)
        {

            {
                if(v!=null)
                {
                    var e=v as System.Collections.IEnumerable;
                    if (e!=null)
                    {
                        foreach(var item in e){ 
                            var view=item as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                            if(view!=null){
                                __Write(view);
                            }else{
                                __Write(item.ToString());
                            }
                        }
                    }else{
                        var view=v as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                        if(view!=null){
                            __Write(view);
                        }else{
                            __Write(v.ToString());
                        }
                    }
                }        
            }
        }
                ///<summary>
        ///For internal use only!
        ///</summary>
         StringBuilder __Output;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __InLayout=false;
                ///<summary>
        ///For internal use only!
        ///</summary>
         TextWriter __Writer;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __RenderDirectly=false;

    }
}

/*File: /home/earlz/Projects/lastyearswishes/templates/TagIndexView.html */
namespace Earlz.LastYearsWishes{
        ///<summary>
        ///
        ///</summary>
     class TagIndexView: Earlz.BarelyMVC.ViewEngine.Internal.BarelyViewDummy
    {
                ///<summary>
        ///
        ///</summary>
            public List<string> Tags{
        get;
        set;
        }

                ///<summary>
        ///This is the layout of the given view (master page)
        ///</summary>
            public LayoutView Layout{
        get;
        set;
        }

                ///<summary>
        ///Indicates if this view is set to be rendered directly to the appropriate stream
        ///</summary>
            public override bool RenderedDirectly{
        get{ return __RenderDirectly; }
        }

                ///<summary>
        ///The "Flash" notification text(passes through to the layout
        ///</summary>
            public override string Flash{
        get{return Layout.Flash;}
        set{Layout.Flash=value;}
        }

         void BuildOutput()
        {
__Write(@"");
__Write(@"");
__Write(@"
");
__Write(@"
<div class=""entry"">
	<h2>Tag List</h2>
	<div>
	<p>Definitely not the best formatting, but it works for now.</p>
	</div>
	");
foreach(var tag in Tags){
__Write(@"
		<p style=""margin-top: 1px; margin-bottom: 1px""><a href=""/tags/");
{
                object __v;
                

                    __v=tag;
                
__OutputVariable(__v);
}
__Write(@"/1"">");
{
                object __v;
                

                    __v=tag;
                
__OutputVariable(__v);
}
__Write(@"</a></p>
	");
}
__Write(@"
</div>
");

        }
         void __Init(TextWriter writer)
        {
__Writer=writer;Layout=new LayoutView(); Layout.Content=this;
        }
        public  TagIndexView()
        {
if(__RenderDirectly){ __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter); }else{ __Init(null); }
        }
        public  TagIndexView(bool UseHttpResponse)
        {
if(UseHttpResponse){ __RenderDirectly=true; __Init(Earlz.BarelyMVC.HttpHandler.CurrentWriter);}else{ __Init(null);}
        }
        public  TagIndexView(TextWriter writer)
        {
__Init(writer);
        }
        protected virtual void __Write(string s)
        {
if(__Writer!=null){ __Writer.Write(s); } __Output.Append(s);
        }
        protected virtual void __Write(IBarelyView v)
        {
string s=v.RenderView(); __Output.Append(s);
        }
        public override string RenderView()
        {
__Output=new StringBuilder();
if(Layout==null){
        BuildOutput();
        return __Output.ToString();
}
if(__InLayout){
        //If we get here, then the layout is currently trying to render itself(and we are being rendered as a partial/sub view)
        __InLayout=false;
        BuildOutput();
        return __Output.ToString();
}else{
        //otherwise, we are here and someone called RenderView on us(and we have a layout to render first)
        __InLayout=true;
        return Layout.RenderView(); 
}
//This should recurse no more than 2 times
//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set.
        }
        protected virtual void __OutputVariable(object v)
        {

            {
                if(v!=null)
                {
                    var e=v as System.Collections.IEnumerable;
                    if (e!=null)
                    {
                        foreach(var item in e){ 
                            var view=item as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                            if(view!=null){
                                __Write(view);
                            }else{
                                __Write(item.ToString());
                            }
                        }
                    }else{
                        var view=v as Earlz.BarelyMVC.ViewEngine.IBarelyView;
                        if(view!=null){
                            __Write(view);
                        }else{
                            __Write(v.ToString());
                        }
                    }
                }        
            }
        }
                ///<summary>
        ///For internal use only!
        ///</summary>
         StringBuilder __Output;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __InLayout=false;
                ///<summary>
        ///For internal use only!
        ///</summary>
         TextWriter __Writer;
                ///<summary>
        ///For internal use only!
        ///</summary>
         bool __RenderDirectly=false;

    }
}


//